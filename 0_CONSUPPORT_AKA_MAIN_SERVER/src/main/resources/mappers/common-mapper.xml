<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="commonMapper">

	<resultMap type="kh.study.consupport.common.vo.UsersVO" id="user">
		<id column="USER_ID" 				property="userId"/>
		<result column="USER_PW" 			property="userPw"/>
		<result column="USER_NAME" 			property="userName"/>
		<result column="USER_ADDR" 			property="userAddr"/>
		<result column="USER_ADDR_DETAIL" 	property="userAddrDetail"/>
		<result column="USER_EMAIL" 		property="userEmail"/>
		<result column="USER_BIRTH" 		property="userBirth"/>
		<result column="USER_TELL" 			property="userTell"/>
		<result column="USER_MILEAGE" 		property="userMileage"/>
		<result column="USER_ROLE" 			property="userRole"/>
		<result column="USER_STATUS" 		property="userStatus"/>
	</resultMap>

	<resultMap type="kh.study.consupport.common.vo.TicketVO" id="ticket">
		<id column="TICKET_CODE" 			property="ticketCode"/>
		<result column="SEAT_CODE" 			property="seatCode"/>
		<result column="USER_ID" 			property="userId"/>
		<result column="HALL_CODE" 			property="hallCode"/>
		<result column="CONCERT_CODE" 		property="concertCode"/>
		
		<result column="SEAT_STATUS" 			property="seatStatus"/>
	</resultMap>
	
	<!-- 콘서트 -->
	<resultMap type="kh.study.consupport.common.vo.ConcertVO" id="concert">
		<id column="CONCERT_CODE"					property="concertCode"/>
		<result column="CONCERT_NAME" 			 	property="concertName"/>
		<result column="CONCERT_STATUS" 		 	property="concertStatus"/>
		<result column="CONCERT_RATED" 			 	property="concertRated"/>
		<result column="CONCERT_TICKETING_DATE" 	property="concertTicketingDate"/>
		<result column="HALL_DATE_CODE" 			property="hallDateCode"/>
		<result column="GENRE_CODE"					property="genreCode"/>
		<result column="HALL_CODE" 					property="hallCode"/>
		<result column="USER_ID" 					property="userId"/>
		
		<result column="IS_SCHEDULED" 				property="isScheduled"/>	
		<result column="IS_SOLDOUT" 				property="isSoldout"/>
		
		<result column="GENRE_NAME" 				property="genreName"/>
		<result column="HALL_NAME" 					property="hallName"/>
		<result column="CONCERT_DATE" 				property="concertDate"/>
		
		<association property="artist" 				resultMap="artist"/>
		<association property="concertPrice"		resultMap="concertPrice"/>
		<collection property="concertImgList" 		resultMap="concertImg"/>
	</resultMap>
	
	<!-- 콘서트 이미지 -->
	<resultMap type="kh.study.consupport.common.vo.ConcertImgVO" id="concertImg">
		<id column="CONCERT_IMG_CODE" 				property="concertImgCode"/>
		<result column="CONCERT_IMG_NAME_ORIGIN" 	property="concertImgNameOrigin"/>
		<result column="CONCERT_IMG_NAME_ATTACHED" 	property="concertImgNameAttached"/>
		<result column="CONCERT_IMG_IS_MAIN"		property="concertImgIsMain"/>
		<result column="CONCERT_CODE" 				property="concertCode"/>
	</resultMap>
	
	<!-- 아티스트 (콘서트 상세 조회용) -->
	<resultMap type="kh.study.consupport.common.vo.ArtistVO" id="artist">
		<id column="USER_ID" 					property="userId"/>
		<result column="ARTIST_NAME" 			property="artistName"/>
		<result column="ARTIST_DETAIL" 			property="artistDetail"/>
		
		<association property="artistImg" 	resultMap="artistImg"/>
	</resultMap>
	
	<!-- 아티스트 (아티스트 상세 조회용) -->
	<resultMap type="kh.study.consupport.common.vo.ArtistVO" id="artistDetail">
		<id column="USER_ID" 					property="userId"/>
		<result column="ARTIST_NAME" 			property="artistName"/>
		<result column="ARTIST_DETAIL" 			property="artistDetail"/>

		<collection property="artistImgList" 	resultMap="artistImg"/>
	</resultMap>
	
	<!--아티스트 이미지  -->
	<resultMap type="kh.study.consupport.common.vo.ArtistImgVO" id="artistImg">
		<id column="ARTIST_IMG_CODE" 				property="artistImgCode"/>
		<result column="ARTIST_IMG_NAME_ORIGIN" 	property="artistImgNameOrigin"/>
		<result column="ARTIST_IMG_NAME_ATTACHED" 	property="artistImgNameAttached"/>
		<result column="ARTIST_IMG_IS_MAIN" 		property="artistImgIsMain"/>
		<result column="USER_ID" 					property="userId"/>
	</resultMap>
	
	<!-- 콘서트 프라이스 -->
	<resultMap type="kh.study.consupport.common.vo.ConcertPriceVO" id="concertPrice">
		<id column="CONCERT_CODE" 					property="concertCode"/>
		<result column="CONCERT_PRICE_R" 			property="concertPriceR"/>
		<result column="CONCERT_PRICE_S" 			property="concertPriceS"/>
		<result column="CONCERT_PRICE_A" 			property="concertPriceA"/>
	</resultMap>
		
	<!-- 장르 -->
	<resultMap type="kh.study.consupport.common.vo.GenreVO" id="genre">
		<id column="GENRE_CODE"						property="genreCode"/>
		<result column="GENRE_NAME" 				property="genreName"/>
	</resultMap>
	
	
	<!-- 세일즈 -->
	<resultMap type="kh.study.consupport.common.vo.SalesVO" id="sales">
		<id column="SALES_CODE" 				property="salesCode"/>
		<result column="SALES_AMOUNT" 			property="salesAmount"/>
		<result column="SALES_TOTAL_PRICE"		property="salesTotalPrice"/>
		<result column="SALES_DATE" 			property="salesDate"/>
		<result column="SALES_STATUS" 			property="salesStatus"/>
		<result column="USER_ID" 				property="userId"/>
		<result column="HALL_CODE" 				property="hallCode"/>
		
		<result column="CONCERT_CODE" 			property="concertCode"/>
		
		<result column="IS_EXPIRED" 			property="isExpired"/>
		
		<association property="concert" 		resultMap="concert"/>
		<association property="coupon" 			resultMap="coupon"/>
		
		<collection property="salesDetailList"	resultMap="salesDetail"/>
	</resultMap>

	<!-- 세일즈 디테일 -->
	<resultMap type="kh.study.consupport.common.vo.SalesDetailVO" id="salesDetail">
		<id column="SALES_DETAIL_CODE" 		property="salesDetailCode"/>
		<result column="SALES_CODE" 		property="salesCode"/>
		<result column="TICKET_CODE" 		property="ticketCode"/>
		
		<result column="SEAT_CODE" 			property="seatCode"/>
		<result column="CONCERT_PRICE" 		property="concertPrice"/>
	</resultMap>
	
	<!-- 쿠폰 -->
	<resultMap type="kh.study.consupport.common.vo.CouponVO" id="coupon">
		<id column="COUPON_CODE"					property="couponCode"/>
		<result column="COUPON_VALUE" 				property="couponValue"/>
		<result column="COUPON_STATUS" 				property="couponStatus"/>
		<result column="USER_ID" 					property="userId"/>
		<result column="SALES_CODE" 				property="salesCode"/>
	</resultMap>
	
<!-- ======================================================================================================================================================================================================================== -->
	
	
	
	
	<!-- Join -->
	<insert id="insertUser">
		INSERT INTO USERS(
		    USER_ID
		    , USER_PW
		    , USER_NAME
		    , USER_ADDR
		    , USER_ADDR_DETAIL
		    , USER_BIRTH
		    , USER_TELL
		) VALUES(
		    #{userId}
		    , #{userPw}
		    , #{userName}
		    , #{userAddr}
		    , #{userAddrDetail}
		    , #{userBirth}
		    , #{userTell}
		)
	</insert>
	
	
	
	<!-- Login -->
	<select id="login" resultMap="user">
		SELECT
			USER_ID
			, USER_PW
			, USER_ROLE
		FROM USERS
		WHERE
			USER_ID = #{userId}
	</select>
	
	<!-- get LoginInfo -->
	<select id="selectLoginInfo" resultMap="user">
		SELECT
			USER_ID
			, USER_NAME
			, USER_ROLE
		FROM USERS
		WHERE
			USER_ID = #{userId}
	</select>
	
	
	<!-- get Birth -->
	<select id="getUserAge" resultType="INTEGER">
		SELECT
			TO_NUMBER( USER_BIRTH )
		FROM USERS
		WHERE
			USER_ID = #{userId}
	</select>
	
	


	<select id="selectTicketList" resultMap="ticket">
		SELECT
			TICKET_CODE
			, SEAT_CODE
			, (DECODE(USER_ID, null		, 'EMPTY'
										, 'BOOKED')) AS SEAT_STATUS
		FROM TICKET
		WHERE CONCERT_CODE = #{concertCode}
		ORDER BY TICKET_CODE
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 구매(티켓팅) 관련 -->
	<select id="selectConcertPrice" resultMap="concertPrice">
		SELECT
			CONCERT_PRICE_R
			, CONCERT_PRICE_S
			, CONCERT_PRICE_A
		FROM CONCERT_PRICE
		WHERE CONCERT_CODE = #{concertCode}
	</select>
	
	<select id="isExistWaitStatus" resultType="String">
		SELECT
			TICKET_CODE
		FROM
			SALES, SALES_DETAIL
		WHERE
			SALES.SALES_CODE = SALES_DETAIL.SALES_CODE
		AND SALES_STATUS IN ('WAIT', 'PAID')
		AND TICKET_CODE IN(
		<foreach collection="ticketCodeList" item="ticketCode" separator=" , ">
			#{ticketCode}
		</foreach>
		)
	</select>
	
	<select id="getNextSalesCode" resultType="String">
		SELECT
			'SALES_' || LPAD( NVL( MAX( TO_NUMBER(SUBSTR(SALES_CODE,7)) )+1, 1), 6, '0')
		FROM SALES
	</select>
	<insert id="insertSales">
		INSERT INTO SALES(
		    SALES_CODE
		    , SALES_AMOUNT
		    , SALES_TOTAL_PRICE
		    , USER_ID
		    , HALL_CODE
		    , CONCERT_CODE
		) VALUES(
		    #{salesCode}
			, #{hallseat.hallSeatRCnt}+#{hallseat.hallSeatSCnt}+#{hallseat.hallSeatACnt}
			
			, (	(	SELECT CONCERT_PRICE_R * #{hallseat.hallSeatRCnt}
		    		FROM CONCERT_PRICE
		    		WHERE CONCERT_CODE = #{concertCode}	) +
		    	(	SELECT CONCERT_PRICE_S * #{hallseat.hallSeatSCnt}
			    	FROM CONCERT_PRICE
			    	WHERE CONCERT_CODE = #{concertCode}	) +
		    	(	SELECT CONCERT_PRICE_A * #{hallseat.hallSeatACnt}
			    	FROM CONCERT_PRICE
			    	WHERE CONCERT_CODE = #{concertCode}	)	)
			
			<!-- 쿠폰이 있다면 ↑위에서 연산한 값에 (100-할인율) / 100 시행해! -->
		    <if test="coupon.couponCode != null and !coupon.couponCode.equals('')">
		    	* (100-(SELECT COUPON_VALUE 
    					FROM COUPON
    					WHERE COUPON_CODE = #{coupon.couponCode})) / 100
			</if>
			
			, #{userId}
			, #{hallCode}
			, #{concertCode}
		)
	</insert>
	<insert id="insertSalesDetail">
		INSERT INTO SALES_DETAIL(
		    SALES_DETAIL_CODE
		    , SALES_CODE
		    , TICKET_CODE
		)
		<foreach collection="ticketCodeList" item="ticketCode" separator="UNION ALL" index="i">
			SELECT
				(SELECT #{salesCode}||'_'||LPAD(1+#{i}, 2, '0') FROM DUAL)
			    , #{salesCode}
			    , #{ticketCode}
			FROM DUAL
		</foreach>
	</insert>
	
	
	<select id="checkTicketingList" resultMap="ticket">
		SELECT
			TICKET_CODE
		FROM TICKET
		WHERE TICKET_CODE IN(
		<foreach collection="ticketCodeList" item="ticketCode" separator=" , ">
			#{ticketCode}
		</foreach>
		)
		AND USER_ID IS NULL
	</select>
	
	<update id="updateSales">
		UPDATE SALES
		SET
			SALES_STATUS = #{salesStatus} <!-- 'PAID' or 'CANCELED' -->
		WHERE
			SALES_CODE =  #{salesCode}
	</update>
	
	<update id="useCoupon">
    	UPDATE COUPON
		SET
			COUPON_STATUS = 'USED'
		    , USER_ID = #{userId}
		    , SALES_CODE = #{salesCode}
		WHERE COUPON_CODE IN( 
			'DUMMY'
		<if test="coupon.couponCode != null and !coupon.couponCode.equals('')">
			, #{coupon.couponCode}
		</if>
		)
	</update>
	
	<update id="letsTicketing">
		UPDATE TICKET
		SET
			USER_ID = #{userId}
		WHERE TICKET_CODE IN(
		<foreach collection="ticketCodeList" item="ticketCode" separator=" , ">
			#{ticketCode}
		</foreach>
		)
	</update>
	
	<update id="refundAll">
		UPDATE TICKET
		SET
			USER_ID = null
		WHERE TICKET_CODE IN(
			SELECT
				TICKET_CODE
			FROM
				SALES_DETAIL
			WHERE
				SALES_CODE = #{salesCode}
		)
	</update>
	
	
	<select id="selectCoupon" resultMap="coupon">
		SELECT
			COUPON_CODE
			, COUPON_VALUE
		FROM COUPON
		WHERE
			COUPON_CODE = #{couponCode}
		AND COUPON_STATUS = 'UNUSED'
	</select>
	






	

	<!-- 메인화면 콘서트 목록 조회 -->
	<select id="selectConcertListOfCommon" resultMap="concert">
        <!--  SELECT CON.CONCERT_CODE
			, CONCERT_NAME
			, CONCERT_IMG_CODE
			, CONCERT_RATED
			, (SELECT HALL_RENT_DATE
                FROM HALL_DATE
                WHERE HALL_DATE_CODE = CON.HALL_DATE_CODE) AS CONCERT_DATE
			
			, CONCERT_IMG_NAME_ATTACHED
            , CONCERT_IMG_IS_MAIN
            
            , CON.USER_ID
            , ART.ARTIST_NAME
            , ARTIST_IMG_NAME_ATTACHED
            , ARTIST_IMG_IS_MAIN
            
		FROM CONCERT CON, CONCERT_IMG CONI, ARTIST ART, ARTIST_IMG ARTI
        WHERE CON.CONCERT_CODE = CONI.CONCERT_CODE
        AND CON.USER_ID = ART.USER_ID
        AND ART.USER_ID = ARTI.USER_ID
        AND CONCERT_IMG_IS_MAIN = 'Y'
        AND ARTIST_IMG_IS_MAIN = 'Y'
        
		AND CONCERT_STATUS = 'ACT'
        
        ORDER BY CONCERT_CODE DESC -->

	SELECT ROW_NUM
		, CONCERT_CODE
		, CONCERT_NAME
		, CONCERT_IMG_CODE
		, CONCERT_RATED
		, CONCERT_DATE
	
		, CONCERT_IMG_NAME_ATTACHED
		, CONCERT_IMG_IS_MAIN
	
		, USER_ID
		, ARTIST_NAME
		, ARTIST_IMG_NAME_ATTACHED
		, ARTIST_IMG_IS_MAIN
	FROM
		(SELECT CON.CONCERT_CODE
			, CONCERT_NAME
			, CONCERT_IMG_CODE
			, CONCERT_RATED
			, HALL_RENT_DATE AS CONCERT_DATE
		
			, CONCERT_IMG_NAME_ATTACHED
			, CONCERT_IMG_IS_MAIN
		
			, CON.USER_ID
			, ART.ARTIST_NAME
			, ARTIST_IMG_NAME_ATTACHED
			, ARTIST_IMG_IS_MAIN
		
			, ROW_NUMBER() OVER (ORDER BY CON.CONCERT_CODE DESC) ROW_NUM

		FROM CONCERT CON, CONCERT_IMG CONI, HALL_DATE HDATE, ARTIST ART, ARTIST_IMG
		ARTI
		WHERE CON.CONCERT_CODE = CONI.CONCERT_CODE
		AND CON.USER_ID = ART.USER_ID
		AND ART.USER_ID = ARTI.USER_ID
		AND HDATE.HALL_DATE_CODE = CON.HALL_DATE_CODE
	
		AND CONCERT_IMG_IS_MAIN = 'Y'
		AND ARTIST_IMG_IS_MAIN = 'Y'
		AND HALL_RENT_DATE >= (SELECT SYSDATE FROM DUAL)
		AND CONCERT_STATUS = 'ACT')
		
	WHERE ROW_NUM BETWEEN  (8 * (${pageNum}-1) + 1) AND (8 * ${pageNum})
	</select>
	
<!-- ======================================================================================================================================================================================================================== -->
	
	<!-- 메인화면 스페셜콘서트 목록 조회 -->
	<select id="selectSpecialConcertListOfCommon" resultMap="concert">
         SELECT CON.CONCERT_CODE
			, CONCERT_NAME
			, CONCERT_IMG_CODE
			, CONCERT_RATED
			, (SELECT HALL_RENT_DATE
                FROM HALL_DATE
                WHERE HALL_DATE_CODE = CON.HALL_DATE_CODE) AS CONCERT_DATE
			
			, CONCERT_IMG_NAME_ATTACHED
            , CONCERT_IMG_IS_MAIN
            
            , CON.USER_ID
            , ART.ARTIST_NAME
            , ARTIST_IMG_NAME_ATTACHED
            , ARTIST_IMG_IS_MAIN
            
            , REG_DATE
            
		FROM CONCERT CON, CONCERT_IMG CONI, ARTIST ART, ARTIST_IMG ARTI, SPECIAL_CONCERT SCON
        WHERE CON.CONCERT_CODE = CONI.CONCERT_CODE
        AND CON.USER_ID = ART.USER_ID
        AND ART.USER_ID = ARTI.USER_ID
        AND CON.CONCERT_CODE = SCON.CONCERT_CODE
        AND CONCERT_IMG_IS_MAIN = 'Y'
        AND ARTIST_IMG_IS_MAIN = 'Y'
        
        AND CON.CONCERT_CODE IN (SELECT CONCERT_CODE 
        					 FROM SPECIAL_CONCERT)
        
		AND CONCERT_STATUS = 'ACT'
        
        ORDER BY REG_DATE
	</select>

<!-- ======================================================================================================================================================================================================================== -->

	<!-- 콘서트 상세 조회 -->
	<select id="selectConcertDetail" resultMap="concert">
		SELECT CON.CONCERT_CODE
			, CONCERT_NAME
			, CONCERT_RATED
			, CONCERT_TICKETING_DATE
			, CON.HALL_CODE
			
			, (	SELECT GENRE_NAME
                FROM GENRE
                WHERE GENRE_CODE = CON.GENRE_CODE) AS GENRE_NAME
                
			, (	SELECT HALL_RENT_DATE
                FROM HALL_DATE
                WHERE HALL_DATE_CODE = CON.HALL_DATE_CODE) AS CONCERT_DATE
                
            , (	SELECT HALL_NAME
                FROM HALL
                WHERE HALL_CODE = CON.HALL_CODE) AS HALL_NAME
            
			, CONCERT_IMG_NAME_ATTACHED
			, CONCERT_IMG_IS_MAIN
            
			, CONCERT_PRICE_R
			, CONCERT_PRICE_S
			, CONCERT_PRICE_A
            
            , ART.USER_ID
			, ART.ARTIST_NAME
			, ARTIST_IMG_NAME_ATTACHED
			, ARTIST_IMG_IS_MAIN
            
		FROM CONCERT CON
           , CONCERT_IMG CONI
           , CONCERT_PRICE CONP
           , ARTIST ART
           , ARTIST_IMG ARTI
		WHERE CON.CONCERT_CODE = CONI.CONCERT_CODE
		AND CON.CONCERT_CODE = CONP.CONCERT_CODE
        AND CON.USER_ID = ART.USER_ID
        AND CON.USER_ID = ARTI.USER_ID
        AND ARTIST_IMG_IS_MAIN = 'Y'
        AND CON.CONCERT_CODE = #{concertCode}
        ORDER BY CONCERT_CODE ASC
	</select>

<!-- ======================================================================================================================================================================================================================== -->

	<!-- 콘서트 검색 -->
	<select id="serchConcert" resultMap="concert" parameterType="hashMap">
		SELECT CON.CONCERT_CODE
		    , CONCERT_NAME
		    , CONCERT_IMG_CODE
		    , CONCERT_RATED
		    , HALL_RENT_DATE AS CONCERT_DATE
		
		    , CONCERT_IMG_NAME_ATTACHED
		    , CONCERT_IMG_IS_MAIN
		
		    , CON.USER_ID
		    , ART.ARTIST_NAME
		    , ARTIST_IMG_NAME_ATTACHED
		    , ARTIST_IMG_IS_MAIN
		    
		    , GEN.GENRE_CODE
       	 	, GENRE_NAME
       	 	
       	 	, IS_SOLDOUT
       	 	, IS_SCHEDULED
			
		FROM 	CONCERT CON
				, CONCERT_IMG CONI
				, HALL_DATE HDATE
				, ARTIST ART
				, ARTIST_IMG ARTI
				, GENRE GEN
				, ( SELECT
			            CONCERT_CODE
			            , DECODE( (TOTAL_SEAT_CNT - SOLD_SEAT_CNT), 0, 'Y', 'N' ) AS IS_SOLDOUT
					FROM(SELECT 
							CONCERT_CODE
							, (	SELECT
									COUNT(USER_ID)
								FROM TICKET
								WHERE CONCERT_CODE = C.CONCERT_CODE) AS SOLD_SEAT_CNT
							, ( SELECT
									HALL_SEAT_CNT
									FROM HALL
								WHERE HALL_CODE = C.HALL_CODE) AS TOTAL_SEAT_CNT
						FROM CONCERT C )) CON_SOLDOUT
				, (	SELECT
						CONCERT_CODE
						, (CASE
							WHEN CONCERT_TICKETING_DATE >= (SELECT SYSDATE FROM DUAL) THEN 'Y'
							ELSE 'N'
							END) AS IS_SCHEDULED
					FROM CONCERT ) CON_SCHEDULED
		
		WHERE CON.CONCERT_CODE = CONI.CONCERT_CODE
		AND CON.USER_ID = ART.USER_ID
		AND ART.USER_ID = ARTI.USER_ID
		AND HDATE.HALL_DATE_CODE = CON.HALL_DATE_CODE
		AND CON.GENRE_CODE = GEN.GENRE_CODE
		AND CON.CONCERT_CODE = CON_SOLDOUT.CONCERT_CODE
		AND CON.CONCERT_CODE = CON_SCHEDULED.CONCERT_CODE
		
		AND CONCERT_IMG_IS_MAIN = 'Y'
		AND ARTIST_IMG_IS_MAIN = 'Y'
		AND CONCERT_STATUS = 'ACT'
					
		<!-- 검색기능 추가 -->
		
		<!-- 장르 -->
		<if test="genreCode != null and !genreCode.equals('')">
		AND CON.GENRE_CODE = #{genreCode}
		</if>
		  	
		<!-- 아티스트 이름 -->
		<if test="artistName != null and !artistName.equals('')">
		AND UPPER(ARTIST_NAME) LIKE UPPER('%'||#{artistName}||'%')
		</if>
		
		<!-- 콘서트 이름 -->
		<if test="concertName != null and !concertName.equals('')">
		AND UPPER(CONCERT_NAME) LIKE UPPER('%'||#{concertName}||'%')
		</if>      
		      
		<!-- 날짜 사이 검색 시작 -->
		<if test="fromDate != null and !fromDate.equals('')">
		AND TO_DATE(#{fromDate}, 'YYYY-MM-DD') &lt;= HALL_RENT_DATE
		</if>
		
		<!-- 시작 날짜 제한이 없다면 기한 만료된 공연도 표시 -->
		<if test="fromDate == null or fromDate.equals('')">
		AND HALL_RENT_DATE >= (SELECT SYSDATE FROM DUAL)
		</if>
		    	
		<!-- 날짜 사이 검색 끝 -->
		<if test="toDate != null and !toDate.equals('')">
		AND HALL_RENT_DATE &lt;= (TO_DATE(#{toDate}, 'YYYY-MM-DD')+1) -(INTERVAL '1' HOUR)
		</if>
		
		<!-- 판매상태? -->
		<if test="nowStatus != null and !nowStatus.equals('')">
		   		
			<if test="nowStatus.equals('ONSALE')">
			AND IS_SOLDOUT = 'N'
			AND IS_SCHEDULED = 'N'
			</if>
			
			<if test="nowStatus.equals('SOLDOUT')">
			AND IS_SOLDOUT = 'Y'
			</if>
			
			<if test="nowStatus.equals('SCHEDULED')">
			AND IS_SCHEDULED = 'Y'
			</if>
		
		</if>
		</select>
<!-- ======================================================================================================================================================================================================================== -->

	<!-- 아티스트 상세 조회 -->
	<select id="selectArtistDetail" resultMap="artist">
		SELECT ART.USER_ID
            , ARTIST_NAME
            , ARTIST_DETAIL
            , ARTIST_IMG_NAME_ATTACHED
            , ARTIST_IMG_IS_MAIN
        FROM ARTIST ART, ARTIST_IMG ARTI
        WHERE ART.USER_ID = ARTI.USER_ID
        AND ART.USER_ID = #{userId}
	</select>












	
	<!-- 캘린더 내용 조회 -->
	<select id="selectConcertListForCalendar" resultMap="concert">
		SELECT CON.CONCERT_CODE
			, CONCERT_NAME
			, CONCERT_IMG_CODE
			, CONCERT_RATED
			, (SELECT HALL_RENT_DATE
                FROM HALL_DATE
                WHERE HALL_DATE_CODE = CON.HALL_DATE_CODE) AS CONCERT_DATE
			
			, CONCERT_IMG_NAME_ATTACHED
            , CONCERT_IMG_IS_MAIN
            
            , CON.USER_ID
            , ART.ARTIST_NAME
            , ARTIST_IMG_NAME_ATTACHED
            , ARTIST_IMG_IS_MAIN
            
		FROM CONCERT CON, CONCERT_IMG CONI, ARTIST ART, ARTIST_IMG ARTI
        WHERE CON.CONCERT_CODE = CONI.CONCERT_CODE
        AND CON.USER_ID = ART.USER_ID
        AND ART.USER_ID = ARTI.USER_ID
        AND CONCERT_IMG_IS_MAIN = 'Y'
        AND ARTIST_IMG_IS_MAIN = 'Y'
        
		AND CONCERT_STATUS = 'ACT'
	</select>
	

	
	
	
	
	<!-- 마이페이지 구매 정보 조회 -->
	<select id="selectSalesInfoForEmail" resultMap="sales">
		SELECT SEAT_CODE
			, CONCERT_NAME
			
			, CASE
				WHEN SEAT_CODE LIKE 'R_%' THEN
					(SELECT CONCERT_PRICE_R 
					 FROM CONCERT_PRICE 
					 WHERE CONCERT_CODE = SALES.CONCERT_CODE)
				WHEN SEAT_CODE LIKE 'S_%' THEN
					(SELECT CONCERT_PRICE_S 
					 FROM CONCERT_PRICE 
					 WHERE CONCERT_CODE = SALES.CONCERT_CODE)
				ELSE
					(SELECT CONCERT_PRICE_A 
					 FROM CONCERT_PRICE 
					 WHERE CONCERT_CODE = SALES.CONCERT_CODE)
				
				END AS CONCERT_PRICE
				
			, SALES_DETAIL_CODE
			, SALES.SALES_CODE
	
			, COUPON_CODE
			, COUPON_VALUE
			
			, SALES.CONCERT_CODE
			, SALES.HALL_CODE
			, HALL_RENT_DATE AS CONCERT_DATE
			 
			, CONI.CONCERT_IMG_NAME_ATTACHED
	        , CONCERT_IMG_IS_MAIN
			
			, SALES.SALES_CODE
			, SALES_TOTAL_PRICE
			, SALES_AMOUNT
			, SALES_DATE
			, SALES.USER_ID

		FROM SALES, SALES_DETAIL, COUPON CP, CONCERT, CONCERT_PRICE, HALL_DATE, TICKET, CONCERT_IMG CONI
		WHERE SALES.SALES_CODE = SALES_DETAIL.SALES_CODE
		AND SALES.SALES_CODE = CP.SALES_CODE(+)
		AND SALES.CONCERT_CODE = CONCERT_PRICE.CONCERT_CODE
		AND SALES.CONCERT_CODE = CONCERT.CONCERT_CODE
		AND CONCERT.HALL_DATE_CODE = HALL_DATE.HALL_DATE_CODE
		AND SALES_DETAIL.TICKET_CODE = TICKET.TICKET_CODE
		AND CONI.CONCERT_CODE = CONCERT.CONCERT_CODE
		
		AND CONCERT_IMG_IS_MAIN = 'Y'
		AND SALES.SALES_CODE = #{salesCode}
		ORDER BY SALES.SALES_CODE DESC
	</select>
</mapper>
